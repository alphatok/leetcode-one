package com.leetcode.en.medium;

import java.util.HashMap;
import java.util.Map;

public class FractionToRecurringDecimal {
	public static class Solution {
		public String fractionToDecimal(int numerator, int denominator) {
			if (denominator == 0) {
				return "";
			}

			Map<Long, Long> fractionMap = new HashMap<Long, Long>(20);
			StringBuilder builder = new StringBuilder();
			long a = (long) numerator;
			long b = (long) denominator;
			long sign = 1;
			if (a < 0) {
				a = -1L * a;
				sign = -1L;
			}
			if (b < 0L) {
				b = -1L * b;
				sign *= -1L;
			}
			long integetPart = a / b;
			builder.append((a / b));
			a = a - integetPart * b;

			if (a == 0) {
				return ((sign==-1 && integetPart > 0)?"-":"")+builder.toString();
			}
			builder.append(".");

			boolean repeated = false;
			long fraction = Integer.MAX_VALUE;
			long dotIndex = builder.length() - 1;
			long fractionIndex = dotIndex + 1;
			fractionMap.put(a, fractionIndex);
			while (a != 0 && !repeated) {
				a *= 10;
				while (a < b) {
					builder.append("0");
					fractionIndex++;
					fractionMap.put(a, fractionIndex);
					a *= 10;
				}

				fraction = a / b;
				a = a - fraction * b;
				builder.append(fraction);
				fractionIndex++;
				Long index = fractionMap.get(a);
				if (index != null) {
					repeated = true;
					break;
				} else {
					fractionMap.put(a, fractionIndex);
				}
			}

			if (repeated) {
				long repeatedeIndex = fractionMap.get(a);
				return ((sign==-1)?"-":"")+builder.substring(0, (int) repeatedeIndex) + "(" + builder.substring((int) repeatedeIndex, builder.length()) + ")";
			}
			return ((sign==-1)?"-":"")+builder.toString();
		}
	}

	public static void main(String[] args) {
		int x = Integer.MIN_VALUE;
		System.out.println(x + "," + (x * -1) + "," + (Integer.MAX_VALUE + 1));
		System.out.println();
		Solution solution = new Solution();
		 System.out.println(solution.fractionToDecimal(100, 3));
		 System.out.println(solution.fractionToDecimal(2, 3));
		 System.out.println(solution.fractionToDecimal(3, 440));
		 System.out.println(solution.fractionToDecimal(4, 333));
		 System.out.println(solution.fractionToDecimal(1, 2));
		 System.out.println(solution.fractionToDecimal(2, 1));
		 System.out.println(solution.fractionToDecimal(-2323, 1));
		 System.out.println(solution.fractionToDecimal(-10, 3));
		System.out.println(solution.fractionToDecimal(0, 3));
		System.out.println(solution.fractionToDecimal(0, -5));  // caution minus 
		System.out.println(solution.fractionToDecimal(7, -12));
		System.out.println(solution.fractionToDecimal(-2147483648, 1));
		System.out.println(solution.fractionToDecimal(12, 2344));// "0.0(05119453924914675767918088737201365187713310580204778156996587030716723549488054607508532423208191126279863481228668941979522184300341296928327645)"
		System.out.println(solution.fractionToDecimal(2, 333));// "0.(006)"
		System.out.println(solution.fractionToDecimal(43, 34523452));// "0.00(0001245530139917642071250580619805922072914377160198232783905850434655259850608218436557271271714080040431646290759104854288615170927866657134981750955843002026564435097625810999433081025617021148406596188585081236951623493502329952404527797509936144276649971155839224884000591829577181331693018415423811037204506664049701634703273589211183169052735514397575306200550281008979055744483489078670348492381352826478649933384413586451320105532899780705591086314311790141959152868027218135660362121377665246221611906016814309299081679317583884716974420750277231836491901215440449002608429771159616367447843859878206849071755628608633922239294031199429303883053177880357966520845018626758413382300240427869148195261586239985503187804046941771639753753477491184832849275906708286297673824738036045758112485391090091454353985227201497694958198270555331488867335746147285619062659203372826100935677000086781588353331526638761384579966105359336603998928033036789020982026942149354010137804296047799623282167727607308794033690489583718337320381519206132689164455512733778765808239570017505781287456422376302346590369931720617046059009394541426506248564019611943788239947731762165614261285343076352851389252731737255011462932501651341238993134290278967468258967845973224230300029093266803099527822420538942629491396167451621002442050117120385296348696532432504142401518828418432780128707870811991801978550696494661078503968838342121755379502605938710879781083305342698638595004925926874288237456671482330330118784181836741007243423977416858545895120800782030719291917853405852925715539685892360937718510883558225869185966687224672665989484481447567873571854865498386430186645298390207329209141658255958876881720866152086992922955676622372525204026526663671987378318946784348216395046474495076564185991597827471018830909493059963992013313153041590394842323415398900434406153822624690022307155147752895625848770858719458297507445083996814687013338063644388747683748427011296552847612110167893986962833264761588731045783023088189442932879365597623319939153245741474519987166984344439252482631227027934518251535217277808719707403535428612411064803137299248058971623115788073568077722934543162138015630650144719015931547053869352346341263903737088631808893270580242091665688587572297231458777644831113644139641655764898597046436723650925753311111530793618204807560958851971118067799245567911343280503931066916483322699016309261310253679151204230677743349651129904390789194545203648812407287660573455980010341955375725463374867611732453637602636028401794814724784763702077069233980425827637398484948724131063139340758855748260631642513616541011020566541260126594524788540844640912502029055495377461095141934242265228865294235350508981546804763324362812849653620964670624478687704810052019131806402210300406807523187426332685387312948890510717178571829954895588077345220286777811210767683370712754912226042749143393887725943512253641379778592245062863354452503764687262444091627917161933864550972480967430487542207540543744003351692640701167426710399643697275695373683952578090974216599197554172740315771435602673799827433247405271060379477695335912526939658293730302520153546638383670323581778554473637224921772017468009861817989695816049912969305618684944946988499296072710226080520569032320406429808931042005880524346174884249697857560709745943134539384995451787382096089348191484443676142235139174379201709029560543366289095308313896304459936393382677954684253475)"
		System.out.println(solution.fractionToDecimal(22, 345));// "0.0(6376811594202898550724)"
	}
}
